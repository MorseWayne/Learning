---
# 本文件为clang-format的配置文件模版，实际生效的文件会基于此文件进行修改。
# 优先级说明：    在Wecode配置->Fixbot配置界面的选项，优先级最高；
#               在规则集中的参数，优先级次之：
#               在此处模版配置的优先级最低，只有以上两个不涉及的项目才生效。
# 此处添加的每个选项的注释仅供参考，详情可以参见官方文档：https://clang.llvm.org/docs/ClangFormatStyleOptions.html

# 此文件修改保存之后如不生效，请点击【Wecode配置->Fixbot配置界面】中的【保存】按钮重试。

# 配置界面对应的选项如下：
# 函数参数格式：ParametersAlignment
# 指针/引用类型跟随位置：PointerAlignment
# namespace中代码格式：NamespaceIndentation
# 预编译处理语句格式：IndentPPDirectives
# 注释格式：AlignTrailingComments
# 空函数体格式：AllowShortFunctionsOnASingleLine
# 添加namespace注释：FixNamespaceComments
# 大括号换行风格：BraceWrapping

# 规范对应的配置项如下，如果规则集中配置了这些参数，会覆盖此文件的配置：
# G.FMT.03 使用统一的大括号换行风格(C_RULE_ID_KR_STYLE，配置项：风格）配置为K&R风格，除了函数外其他类型左大括号位于行末。 配置为Allman风格，所有类型左大括号都换行
# 对应配置项：BraceWrapping
# G.FMT.05 行宽不超过120个字符	(C_RULE_ID_LINE_LENGTH，配置项：最大行宽)	按照配置的行宽进行格式化
# 对应配置项：ColumnLimit
# G.FMT.10 指针类型"*"跟随变量或者函数名/G.FMT.14-CPP 指针类型"*"和引用类型"&"只跟随类型或变量名 （C_RULE_ID_POINTER_DECLARE_FOLLOW_NAME，配置项：跟随类型或跟随变量名）	配置为0,2时。跟随变量名 配置为1时，跟随类型
# 对应配置项：PointerAlignment
# G.FMT.11 用空格突出关键字和重要信息/G.FMT.16-CPP 用空格突出关键字和重要信息 （C_RULE_ID_HORIZON_SPACE_SHIELD，配置项：花括号内侧空格风格）	配置为0时，花括号内侧没有空格,配置为1,2时，花括号内侧存在空格
# 对应配置项：Cpp11BracedListStyle

# 一些常用配置项如下：
# 启用/禁用头文件排序：SortIncludes
# 行内注释空格数： SpacesBeforeTrailingComments
# 函数参数换行时对齐： AlignAfterOpenBracket

# 语言: None, Cpp, Java, JavaScript, ObjC, Proto, TableGen, TextProto
Language: Cpp

BasedOnStyle:  Google
# 访问说明符(public、private等)的偏移
AccessModifierOffset: -4
# 开括号(开圆括号、开尖括号、开方括号)后的对齐: Align, DontAlign, AlwaysBreak(总是在开括号后换行)
AlignAfterOpenBracket: Align
# 连续的赋值时,对齐所有的等号
AlignConsecutiveAssignments: false
# 连续声明时，对齐所有声明的变量名
AlignConsecutiveDeclarations: false
AlignEscapedNewlines: Left
# 水平对齐二元和三元表达式的操作数
AlignOperands: true
# 对齐连续的尾随的注释
AlignTrailingComments: false
AllowAllArgumentsOnNextLine: true
AllowAllConstructorInitializersOnNextLine: false
# 允许函数声明的所有参数在放在下一行
AllowAllParametersOfDeclarationOnNextLine: true
# 允许短的块放在同一行
AllowShortBlocksOnASingleLine : false
# 允许短的case标签放在同一行
AllowShortCaseLabelsOnASingleLine: false
# 允许短的函数放在同一行: None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中，空函数), All
AllowShortFunctionsOnASingleLine: All
# 允许短的Lamda函数放在同一行: None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中，空函数), All
AllowShortLambdasOnASingleLine: Inline
# 是否允许短if单行 If true, if (a) return; 可以放到同一行Never WithoutElse Always
AllowShortIfStatementsOnASingleLine: Never
# 允许短的循环保持在同一行
AllowShortLoopsOnASingleLine: false
# 总是在定义返回类型后换行(deprecated)
AlwaysBreakAfterDefinitionReturnType: None
# 总是在返回类型后换行: None, All, TopLevel(顶级函数，不包括在类中的函数),
#   AllDefinitions(所有的定义，不包括声明), TopLevelDefinitions(所有的顶级函数的定义)
AlwaysBreakAfterReturnType: None
# 总是在多行string字面量前换行
AlwaysBreakBeforeMultilineStrings:  false
# 总是在template声明后换行No,MultiLine,Yes
AlwaysBreakTemplateDeclarations:  Yes
# false表示函数实参要么都在同一行，要么都各自一行
BinPackArguments: true
# false表示所有形参要么都在同一行，要么都各自一行
BinPackParameters: true
# 大括号换行，只有当BreakBeforeBraces设置为Custom时才有效
BraceWrapping:
  # { case后面
  AfterCaseLabel:  false
  # class定义后面
  AfterClass: false
  # 控制语句后面
  AfterControlStatement:  false
  # enum定义后面
  AfterEnum: false
  # 函数定义后面
  AfterFunction:  true
  # 命名空间定义后面
  AfterNamespace: false
  # ObjC定义后面
  AfterObjCDeclaration: false
  # struct定义后面
  AfterStruct:  false
  # union定义后面
  AfterUnion: false

  AfterExternBlock: false

# 在二元运算符前换行: None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行)
BreakBeforeBinaryOperators: None
# 在大括号前换行: Attach(始终将大括号附加到周围的上下文), Linux(除函数、命名空间和类定义，与Attach类似),
#   Mozilla(除枚举、函数、记录定义，与Attach类似), Stroustrup(除函数定义、catch、else，与Attach类似),
#   Allman(总是在大括号前换行), GNU(总是在大括号前换行，并对于控制语句的大括号增加额外的缩进), WebKit(在函数前换行), Custom
#   注：这里认为语句块也属于函数
BreakBeforeBraces:  Custom
BreakBeforeInheritanceComma: false
# 构造函数继承参数列表格式BeforeColon  BeforeComma AfterColon
BreakInheritanceList: BeforeComma
# 在三元运算符前换行
BreakBeforeTernaryOperators: false

# 在构造函数的初始化列表的逗号前换行
BreakConstructorInitializersBeforeComma:  false
BreakConstructorInitializers: BeforeColon
BreakAfterJavaFieldAnnotations: false
BreakStringLiterals: true
# 每行字符的限制，0表示没有限制
ColumnLimit: 120
# 描述具有特殊意义的注释的正则表达式，它不应该被分割为多行或以其它方式改变
CommentPragmas: '^ NOLINT'
CompactNamespaces: false
# 构造函数的初始化列表要么都在同一行，要么都各自一行
ConstructorInitializerAllOnOneLineOrOnePerLine: true
# 构造函数的初始化列表的缩进宽度
ConstructorInitializerIndentWidth:  4
# 延续的行的缩进宽度
ContinuationIndentWidth:  4
# 去除C++11的列表初始化的大括号{后和}前的空格
Cpp11BracedListStyle: false
#指针的*的挨着哪边Right,Left
PointerAlignment: Left
# 继承最常用的指针和引用的对齐方式
DerivePointerAlignment: true
# 关闭格式化
DisableFormat:  false
# 自动检测函数的调用和定义是否被格式为每行一个参数(Experimental)
ExperimentalAutoDetectBinPacking: false
# If true, clang-format adds missing namespace end comments and fixes invalid existing ones. // namespace xxx
FixNamespaceComments: true
# 需要被解读为foreach循环而不是函数调用的宏
ForEachMacros:
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH

#  multiple #include blocks can be sorted as one and divided based on category.
IncludeBlocks:   Preserve

# 对#include进行排序，匹配了某正则表达式的#include拥有对应的优先级，匹配不到的则默认优先级为INT_MAX(优先级越小排序越靠前)，
#   可以定义负数优先级从而保证某些#include永远在最前面
IncludeCategories:
  - Regex: '<.*\.h>'
    Priority: 1
  - Regex: '^<.*'
    Priority: 2
  - Regex: '^"spt_define\.h"'
    Priority: 3
  - Regex: '^"spt_.*\.h"'
    Priority: 4
  - Regex: '^"utfp_.*\.h"'
    Priority: 5
  - Regex: '^"ufp_define\.h"'
    Priority: 6
  - Regex: '^"ufp_.*\.hxx"'
    Priority: 7
  - Regex: '^"ufp_.*\.h"'
    Priority: 8
  - Regex: '^"ufdc_define\.h"'
    Priority: 9
  - Regex: '^"ufs_.*\.h"'
    Priority: 10
  - Regex: '^"ctrl_define\.h"'
    Priority: 11
  - Regex: '^"ctrl_.*\.h"'
    Priority: 12
  - Regex: '^"cdm_.*\.h"'
    Priority: 13
  - Regex: '.*'
    Priority: 14

# include排序的regex
IncludeIsMainRegex: '([-_](test|benchmark))?$'

# 缩进case标签
IndentCaseLabels: true

IndentPPDirectives:  None
#缩进宽度
IndentWidth: 4
# 函数返回类型换行时，缩进函数声明或函数定义的函数名
IndentWrappedFunctionNames: false
JavaScriptQuotes: Leave
JavaScriptWrapImports: true
# 保留在块开始处的空行
KeepEmptyLinesAtTheStartOfBlocks: false
# 开始一个块的宏的正则表达式
MacroBlockBegin: '[A-Z_]+_BEGIN\(.*\)$'
# 结束一个块的宏的正则表达式
MacroBlockEnd: '.[A-Z_]+_END\(.*\)$'
# 连续空行的最大数量
MaxEmptyLinesToKeep: 1
# 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All
NamespaceIndentation: None
# Auto
# Always: list items into as few lines as possible
# Never:list items onto individual lines
ObjCBinPackProtocolList: Auto

# 使用ObjC块时缩进宽度
ObjCBlockIndentWidth: 4
# 在 @property 后面添加空格, \@property (readonly) 而不是 \@property(readonly).
ObjCSpaceAfterProperty: true
# 在ObjC的protocol列表前添加一个空格
ObjCSpaceBeforeProtocolList:  true
PenaltyBreakAssignment: 10
# 在call(后对函数调用换行的penalty
PenaltyBreakBeforeFirstCallParameter: 2
# 在一个注释中引入换行的penalty
PenaltyBreakComment:  300
# 第一次在<<前换行的penalty
PenaltyBreakFirstLessLess: 120
# 在一个字符串字面量中引入换行的penalty
PenaltyBreakString: 1000
PenaltyBreakTemplateDeclaration: 10

# 对于每个在行字符数限制之外的字符的penalty
PenaltyExcessCharacter: 1000000
# 将函数的返回类型放到它自己的行的penalty
PenaltyReturnTypeOnItsOwnLine:  120

# 换行的时候对齐操作符
#AlignOperands: true
RawStringFormats:
  - Language:        Cpp
    Delimiters:
      - cc
      - CC
      - cpp
      - Cpp
      - CPP
      - 'c++'
      - 'C++'
    CanonicalDelimiter: ''
    BasedOnStyle:    google
  - Language:        TextProto
    Delimiters:
      - pb
      - PB
      - proto
      - PROTO
    EnclosingFunctions:
      - EqualsProto
      - EquivToProto
      - PARSE_PARTIAL_TEXT_PROTO
      - PARSE_TEST_PROTO
      - PARSE_TEXT_PROTO
      - ParseTextOrDie
      - ParseTextProtoOrDie
    CanonicalDelimiter: ''
    BasedOnStyle:    google
# 允许重新排版注释
ReflowComments: false
# 允许排序#include,  maybe造成编译错误
SortIncludes: false
# 允许排序using
SortUsingDeclarations: false

# 在C风格类型转换后添加空格
SpaceAfterCStyleCast: true
SpaceAfterLogicalNot: false
SpaceAfterTemplateKeyword: true
SpaceBeforeAssignmentOperators: true
SpaceBeforeCpp11BracedList: true
SpaceBeforeCtorInitializerColon: true
SpaceBeforeInheritanceColon: true
# 开圆括号之前添加一个空格: Never, ControlStatements, Always
SpaceBeforeParens:  ControlStatements
SpaceBeforeRangeBasedForLoopColon: true
# 在空的圆括号中添加空格
SpaceInEmptyParentheses:  false
# 在尾随的评论前添加的空格数(只适用于//)
SpacesBeforeTrailingComments: 2
# 在尖括号的<后和>前添加空格
SpacesInAngles: false
# 在容器(ObjC和JavaScript的数组和字典等)字面量中添加空格var arr = [ 1, 2, 3 ];
SpacesInContainerLiterals:  true
# 在C风格类型转换的括号中添加空格
SpacesInCStyleCastParentheses:  false
# 在圆括号的(后和)前添加空格
SpacesInParentheses:  false
# 在方括号的[后和]前添加空格，lamda表达式和未指明大小的数组的声明不受影响
SpacesInSquareBrackets: false
# 标准: Cpp03, Cpp11, Auto
Standard: Cpp11
StatementMacros:
  - Q_UNUSED
  - QT_REQUIRE_VERSION
#tab的宽度
TabWidth: 4
# 使用tab字符: Never, ForIndentation, ForContinuationAndIndentation, Always
UseTab: Never